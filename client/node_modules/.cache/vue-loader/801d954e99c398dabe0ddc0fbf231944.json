{"remainingRequest":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\src\\views\\Gamepage.vue?vue&type=template&id=6c934f3b&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\src\\views\\Gamepage.vue","mtime":1575189285480},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}