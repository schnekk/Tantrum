{"remainingRequest":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\src\\components\\Bar.vue?vue&type=template&id=2aa73eda&scoped=true&","dependencies":[{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\src\\components\\Bar.vue","mtime":1575286888761},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\User\\Desktop\\Work\\CPE327 Software Engineer\\streaddit\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}